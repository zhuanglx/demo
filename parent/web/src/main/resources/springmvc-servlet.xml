<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:mvc="http://www.springframework.org/schema/mvc"
    xmlns:aop="http://www.springframework.org/schema/aop" 
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
    xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
        http://www.springframework.org/schema/mvc
        http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd
        http://www.springframework.org/schema/aop 
        http://www.springframework.org/schema/aop/spring-aop-4.0.xsd 
        http://www.springframework.org/schema/tx  
        http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.0.xsd">
        
    <!-- 指定从配置文件中加载数据库连接信息 -->
    <bean id="applicationProperties" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="locations">
            <value>classpath:demo.properties</value>
        </property>
        <property name="fileEncoding">
            <value>UTF-8</value>
        </property>
    </bean>
    
    <!-- 配置数据源 也可以用dbcp、c3p0数据库连接池等，这里使用Spring默认的 -->
    <!--  
      使用连接池可以提高访问性能，这里可以加入dbcp或c3p0的jar包，并修改class实现
        <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource.class">
    --> 
    <!-- data source -->  
    <bean id="dataSourceDba"  
          class="com.mchange.v2.c3p0.ComboPooledDataSource"  
          destroy-method="close">  
        <property name="driverClass" value="${dba.jdbc.driver}"/>  
        <property name="jdbcUrl" value="${dba.jdbc.url}"/>  
        <property name="user" value="${dba.jdbc.username}"/>  
        <property name="password" value="${dba.jdbc.password}"/>  
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->   
        <property name="acquireIncrement" value="${dba.c3p0.acquireIncrement}"/>  
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->   
        <property name="initialPoolSize" value="${dba.c3p0.initialPoolSize}"/>  
        <property name="minPoolSize" value="${dba.c3p0.minPoolSize}"/>  
        <property name="maxPoolSize" value="${dba.c3p0.maxPoolSize}"/>  
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->   
        <property name="maxIdleTime" value="${dba.c3p0.maxIdleTime}"/>  
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->   
        <property name="idleConnectionTestPeriod" value="${dba.c3p0.idleConnectionTestPeriod}"/>  
        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements   
             属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   
             如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->   
        <property name="maxStatements" value="${dba.c3p0.maxStatements}"/>  
        <!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 3-->   
        <property name="numHelperThreads" value="${dba.c3p0.numHelperThreads}"/>  
    </bean>      
    
    <!-- data source -->  
    <bean id="dataSourceDbb"  
          class="com.mchange.v2.c3p0.ComboPooledDataSource"  
          destroy-method="close">  
        <property name="driverClass" value="${dbb.jdbc.driver}"/>  
        <property name="jdbcUrl" value="${dbb.jdbc.url}"/>  
        <property name="user" value="${dbb.jdbc.username}"/>  
        <property name="password" value="${dbb.jdbc.password}"/>  
        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->   
        <property name="acquireIncrement" value="${dbb.c3p0.acquireIncrement}"/>  
        <!--初始化时获取三个连接，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->   
        <property name="initialPoolSize" value="${dbb.c3p0.initialPoolSize}"/>  
        <property name="minPoolSize" value="${dbb.c3p0.minPoolSize}"/>  
        <property name="maxPoolSize" value="${dbb.c3p0.maxPoolSize}"/>  
        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->   
        <property name="maxIdleTime" value="${dbb.c3p0.maxIdleTime}"/>  
        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->   
        <property name="idleConnectionTestPeriod" value="${dbb.c3p0.idleConnectionTestPeriod}"/>  
        <!-- JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements   
             属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。   
             如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->   
        <property name="maxStatements" value="${dbb.c3p0.maxStatements}"/>  
        <!-- c3p0是异步操作的，缓慢的JDBC操作通过帮助进程完成。扩展这些操作可以有效的提升性能 通过多线程实现多个操作同时被执行。Default: 3-->   
        <property name="numHelperThreads" value="${dbb.c3p0.numHelperThreads}"/>  
    </bean>   
   
    <!-- 
     <bean id="dataSourceDba" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${dba.jdbc.driver}"></property>
        <property name="url" value="${dba.jdbc.url}"></property>
        <property name="username" value="${dba.jdbc.username}"></property>
        <property name="password" value="${dba.jdbc.password}"></property>
    </bean>
           
    <bean id="dataSourceDbb" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="${dbb.jdbc.driver}"></property>
        <property name="url" value="${dbb.jdbc.url}"></property>
        <property name="username" value="${dbb.jdbc.username}"></property>
        <property name="password" value="${dbb.jdbc.password}"></property>
    </bean>
     -->
     
    <!-- 配置sqlSessionFactoryDba -->
    <bean id="sqlSessionFactoryDba" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis-config.xml文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSourceDba"></property>
    </bean> 
   
    <!-- 扫描包中的mapper类 注意这里使用了sqlSessionFactoryBeanName -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.demo.dba.mapper"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryDba"></property>
    </bean>       
     
    <!-- 配置sqlSessionFactoryDbb -->
    <bean id="sqlSessionFactoryDbb" class="org.mybatis.spring.SqlSessionFactoryBean">
        <!-- 加载mybatis-config.xml文件 -->
        <property name="configLocation" value="classpath:mybatis-config.xml"></property>
        <!-- 数据源 -->
        <property name="dataSource" ref="dataSourceDbb"></property>
    </bean> 
   
    <!-- 扫描包中的mapper类 注意这里使用了sqlSessionFactoryBeanName -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.demo.dbb.mapper"></property>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactoryDbb"></property>
    </bean>  
    
    <!-- 对静态资源文件的访问  -->    
    <mvc:resources mapping="/static/**" location="/static/" cache-period="31556926"/>
    
    <!-- 定义无Controller的path<->view直接映射 -->
	<mvc:view-controller path="/" view-name="redirect:/index.jsp"/>
	
    <!-- 启用最新的注解解析器、映射器  -->
    <!-- Spring默认情况下使用的是一些旧版本注解解析器、映射器、转换器等 -->
    <mvc:annotation-driven/>    
    
    <!-- 扫描包中所有@Controller注解的类 -->     
    <context:component-scan base-package="com.demo.controller" />
    <!-- 扫描包中所有@Service注解的类 -->
    <context:component-scan base-package="com.demo.service,com.demo.task" />
  
    <!-- 配置视图解析器 -->
    <bean
        class="org.springframework.web.servlet.view.InternalResourceViewResolver">
        <property name="prefix">
            <value>/WEB-INF/jsp/</value>
        </property>
        <property name="suffix">
            <value>.jsp</value>
        </property>
    </bean>
        
</beans>